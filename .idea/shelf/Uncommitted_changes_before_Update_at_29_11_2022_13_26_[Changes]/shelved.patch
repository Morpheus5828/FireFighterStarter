Index: src/main/java/com/firefighterstarter/view/DisplayGridPane.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.firefighterstarter.view;\r\n\r\nimport com.firefighterstarter.modele.cell.Cell;\r\nimport com.firefighterstarter.modele.cell.ColorType;\r\nimport javafx.scene.layout.GridPane;\r\nimport javafx.scene.paint.Color;\r\n\r\nimport java.util.List;\r\n\r\npublic class DisplayGridPane {\r\n    private Cell[][] listOfCells;\r\n    private GridPane gridPane;\r\n    private ColorType colorType;\r\n    private int column;\r\n    private int row;\r\n\r\n    /*\r\n    Here we update all cell in grid\r\n     */\r\n\r\n    public DisplayGridPane(GridPane gridpane, int column, int row, Cell[][] listOfCells) {\r\n        this.gridPane = gridpane;\r\n        this.listOfCells = listOfCells;\r\n        colorType = ColorType.NOTHING;\r\n        this.column = column;\r\n        this.row = row;\r\n    }\r\n\r\n    public void run() {\r\n        int index = 0;\r\n        for(int i = 0; i < column; i++) {\r\n            for(int j = 0; j < row; j++) {\r\n                ColorType color = this.listOfCells[i][j].getColor();\r\n                this.gridPane.getChildren().get(index).setStyle(colorType.getBackgroundColor(color));\r\n                index++;\r\n            }\r\n        }\r\n    }\r\n\r\n    public void setListOfCells(Cell[][] listOfCells) {\r\n        this.listOfCells = listOfCells;\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/firefighterstarter/view/DisplayGridPane.java b/src/main/java/com/firefighterstarter/view/DisplayGridPane.java
--- a/src/main/java/com/firefighterstarter/view/DisplayGridPane.java	(revision 08f2502250e276afc659895cb65f2c80626140bb)
+++ b/src/main/java/com/firefighterstarter/view/DisplayGridPane.java	(date 1669724530190)
@@ -37,7 +37,9 @@
         }
     }
 
-    public void setListOfCells(Cell[][] listOfCells) {
-        this.listOfCells = listOfCells;
+    public void setListOfCells(Cell[][] updateTab) {
+        for(int i = 0; i < this.column; i++)
+            if (this.row >= 0) System.arraycopy(updateTab[i], 0, this.listOfCells[i], 0, this.row);
+
     }
 }
Index: src/main/java/com/firefighterstarter/modele/cell/CellMouvementManager.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.firefighterstarter.modele.cell;\r\n\r\nimport com.firefighterstarter.modele.cell.FireFighter.FireFighter;\r\nimport com.firefighterstarter.modele.cell.FireFighter.FireFighterPaint;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\npublic class CellMouvementManager {\r\n    private Cell[][] listOfCells;\r\n    private int columnNumber;\r\n    private int rowsNumber;\r\n    private final int numberOfCloud = 20;\r\n    private final int numberOfMountainGroup = 6;\r\n    private final int numberOfFire = 300;\r\n    private final int numberOfFireFighter = 10;\r\n    private List<FireFighter> fireFighters;\r\n\r\n    public CellMouvementManager(int columnNumber, int rowsNumber) {\r\n        this.columnNumber = columnNumber;\r\n        this.rowsNumber = rowsNumber;\r\n        this.listOfCells = new Cell[columnNumber][rowsNumber];\r\n        this.fireFighters = new ArrayList<>();\r\n        initGrid();\r\n    }\r\n\r\n    public void initGrid() {\r\n        //initialise all cells\r\n        for(int i = 0; i < this.columnNumber; i++) {\r\n            for(int j = 0; j < this.rowsNumber; j++) {\r\n                Cell cell = new WhitePaint();\r\n                this.listOfCells[i][j] = cell;\r\n            }\r\n        }\r\n\r\n        // add clouds on the grid\r\n        initMountain();\r\n        //initCloud();\r\n        initFire();\r\n        initFireFighter();\r\n    }\r\n\r\n    public Cell[][] updateGrid() {\r\n        Cell[][] updateTab = new Cell[columnNumber][rowsNumber];\r\n\r\n        for(int i = 0; i < this.columnNumber; i++)\r\n            if (this.rowsNumber >= 0) System.arraycopy(this.listOfCells[i], 0, updateTab[i], 0, this.rowsNumber);\r\n\r\n\r\n       // mouveCloud(updateTab);\r\n\r\n       // mouveFire(updateTab);\r\n\r\n        return mouveFF(updateTab);\r\n    }\r\n\r\n    public void initMountain() {\r\n        for (int i = 0; i < numberOfMountainGroup; i++) {\r\n            int randomColumn = (int) (Math.random() * columnNumber);\r\n            int randomRow = (int) (Math.random() * rowsNumber);\r\n\r\n            if(randomColumn + 1 < columnNumber && randomColumn - 1 > 0 && randomRow - 1 > 0) {\r\n                Cell currentCell = listOfCells[randomColumn][randomRow];\r\n                Cell leftCell = listOfCells[randomColumn+1][randomRow];\r\n                Cell rightCell = listOfCells[randomColumn-1][randomRow];\r\n                Cell bottomCell = listOfCells[randomColumn][randomRow-1];\r\n\r\n                if (\r\n                        currentCell.getColor() == ColorType.NOTHING &&\r\n                        leftCell.getColor() == ColorType.NOTHING &&\r\n                        rightCell.getColor() == ColorType.NOTHING &&\r\n                        bottomCell.getColor() == ColorType.NOTHING\r\n                )\r\n                {\r\n                    Cell cell = new MountainPaint();\r\n                    Cell cell1 = new MountainPaint();\r\n                    Cell cell2 = new MountainPaint();\r\n                    Cell cell3 = new MountainPaint();\r\n                    this.listOfCells[randomColumn][randomRow] = cell;\r\n                    this.listOfCells[randomColumn+1][randomRow] = cell1;\r\n                    this.listOfCells[randomColumn-1][randomRow] = cell2;\r\n                    this.listOfCells[randomColumn][randomRow-1] = cell3;\r\n\r\n                }\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n    private void initCloud() {\r\n        for (int i = 0; i < numberOfCloud; i++) {\r\n            int randomColumn = (int) (Math.random() * columnNumber);\r\n            int randomRow = (int) (Math.random() * rowsNumber);\r\n            Cell currentCell = listOfCells[randomColumn][randomRow];\r\n            if (currentCell.getColor() == ColorType.NOTHING) {\r\n                Cell cloud = new CloudPaint();\r\n                this.listOfCells[randomColumn][randomRow] = cloud;\r\n            }\r\n        }\r\n    }\r\n\r\n    public void initFire() {\r\n        for (int i = 0; i < numberOfFire; i++) {\r\n            int randomColumn = (int) (Math.random() * columnNumber);\r\n            int randomRow = (int) (Math.random() * rowsNumber);\r\n            Cell currentCell = listOfCells[randomColumn][randomRow];\r\n            if (currentCell.getColor() == ColorType.NOTHING) {\r\n                Cell fire = new FirePaint();\r\n                this.listOfCells[randomColumn][randomRow] = fire;\r\n            }\r\n        }\r\n    }\r\n\r\n    public void initFireFighter() {\r\n        for (int i = 0; i < numberOfFireFighter; i++) {\r\n            int randomColumn = (int) (Math.random() * columnNumber);\r\n            int randomRow = (int) (Math.random() * rowsNumber);\r\n            Cell currentCell = listOfCells[randomColumn][randomRow];\r\n            if (currentCell.getColor() == ColorType.NOTHING) {\r\n                Cell fireFighter = new FireFighterPaint();\r\n                this.listOfCells[randomColumn][randomRow] = fireFighter;\r\n                this.fireFighters.add(new FireFighter(randomColumn, randomRow));\r\n            }\r\n        }\r\n    }\r\n\r\n    /*public void initWay() {\r\n        for(int i = 0; i < 5; i++)\r\n            this.listOfCells.get(i).setColorType(ColorType.WAY);\r\n        for(int i = 37; i < 400; i += 33)\r\n            this.listOfCells.get(i).setColorType(ColorType.WAY);\r\n        for(int i = 400; i < 415; i++)\r\n            this.listOfCells.get(i).setColorType(ColorType.WAY);\r\n        for(int i =415; i < 800; i += 33)\r\n            this.listOfCells.get(i).setColorType(ColorType.WAY);\r\n    }*/\r\n\r\n    public void mouveCloud(Cell[][] updateTab) {\r\n\r\n        for(int i = 0; i < this.rowsNumber; i++) {\r\n            for(int j = 0; j < this.columnNumber; j++) {\r\n                if(this.listOfCells[j][i].getColor() == ColorType.CLOUD) {\r\n                    if(j <= columnNumber - 2 ) {\r\n                        if(this.listOfCells[j+1][i].getColor() == ColorType.MOUNTAIN && this.listOfCells[j+2][i].getColor() == ColorType.MOUNTAIN) {\r\n                            if(j + 4 < 42 && (this.listOfCells[j+4][i].getColor() == ColorType.NOTHING || this.listOfCells[j+4][i].getColor() == ColorType.FIRE)) {\r\n                                updateTab[j+4][i] = new CloudPaint();\r\n                                updateTab[j][i] = new WhitePaint();\r\n                            }\r\n                        } else if (this.listOfCells[j+1][i].getColor() == ColorType.MOUNTAIN && this.listOfCells[j+2][i].getColor() != ColorType.MOUNTAIN) {\r\n                            if(j + 2 < 42 && (this.listOfCells[j+2][i].getColor() == ColorType.NOTHING || this.listOfCells[j+2][i].getColor() == ColorType.FIRE)) {\r\n                                updateTab[j+2][i] = new CloudPaint();\r\n                                updateTab[j][i] = new WhitePaint();\r\n                            }\r\n                        } else if (this.listOfCells[j+1][i].getColor() == ColorType.FIREFIGHTER && this.listOfCells[j+2][i].getColor() == ColorType.NOTHING) {\r\n                            updateTab[j+2][i] = new CloudPaint();\r\n                            updateTab[j][i] = new WhitePaint();\r\n                        }\r\n\r\n                        else {\r\n                            if(this.listOfCells[j+1][i].getColor() == ColorType.FIREFIGHTER) {\r\n                                updateTab[j][i] = new WhitePaint();\r\n                            }\r\n                            else {\r\n                                updateTab[j+1][i] = new CloudPaint();\r\n                                updateTab[j][i] = new WhitePaint();\r\n                            }\r\n                        }\r\n                        // delete fire under cloud\r\n                        if(i + 1 < 31 && this.listOfCells[j][i+1].getColor() == ColorType.FIRE) {\r\n                            updateTab[j][i+1] = new WhitePaint();\r\n                        }\r\n\r\n                    }\r\n                    else {\r\n                        updateTab[j][i] = new WhitePaint();\r\n                    }\r\n                }\r\n\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    public Cell[][] mouveFF(Cell[][] updateTab) {\r\n        Cell[][] updateTabAfterFF = new Cell[columnNumber][rowsNumber];\r\n        for(int i = 0 ; i < columnNumber; i++) {\r\n            for(int j = 0; j < rowsNumber; j++) {\r\n                //System.out.println(updateTab[j][i].getColor());\r\n                if(updateTab[j][i].getColor() != ColorType.FIREFIGHTER)\r\n                    System.out.println(\"cc\");\r\n                    //updateTabAfterFF[i][j] = updateTab[i][j];\r\n            }\r\n        }\r\n\r\n        for(FireFighter fireFighter : this.fireFighters) {\r\n            if(fireFighter.goalIsNull()) {\r\n                fireFighter.findFire(updateTab);\r\n                Cell fire = fireFighter.getFireGoal();\r\n                if(fire != null) {\r\n                    for(int i = 0; i < this.rowsNumber; i++) {\r\n                        for (int j = 0; j < this.columnNumber; j++) {\r\n                            if(fire == updateTab[j][i]) {\r\n                                updateTabAfterFF[j][i] = new FireFighterPaint();\r\n                                updateTabAfterFF[fireFighter.getColumn()][fireFighter.getRow()] = new WhitePaint();\r\n                                fireFighter.setColumn(i);\r\n                                fireFighter.setRow(j);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n\r\n            }\r\n            fireFighter.resetGoal();\r\n        }\r\n\r\n        return updateTabAfterFF;\r\n    }\r\n\r\n    public void mouveFire(Cell[][] updateTab) {\r\n        try {\r\n            for (int i = 0; i < this.rowsNumber; i++) {\r\n                for (int j = 0; j < this.columnNumber; j++) {\r\n                    if ((i == 0 && j == 0) && this.listOfCells[j][i].getColor() == ColorType.FIRE) {\r\n                        if (\r\n                                this.listOfCells[j + 1][i].getColor() == ColorType.NOTHING ||\r\n                                        this.listOfCells[j + 1][i].getColor() == ColorType.FIRE\r\n\r\n                        ) updateTab[j + 1][i] = new FirePaint();\r\n                        if (\r\n                                this.listOfCells[j + 1][i + 1].getColor() == ColorType.NOTHING ||\r\n                                        this.listOfCells[j + 1][i + 1].getColor() == ColorType.FIRE\r\n\r\n                        ) updateTab[j + 1][i + 1] = new FirePaint();\r\n\r\n                        if (\r\n                                this.listOfCells[j][i + 1].getColor() == ColorType.NOTHING ||\r\n                                        this.listOfCells[j][i + 1].getColor() == ColorType.FIRE\r\n                        ) updateTab[j][i + 1] = new FirePaint();\r\n                    }\r\n                    else if ((i == 32 && j == 0) && this.listOfCells[j][i].getColor() == ColorType.FIRE) {\r\n                        if (\r\n                                this.listOfCells[j+1][i].getColor() == ColorType.NOTHING ||\r\n                                        this.listOfCells[j+1][i].getColor() == ColorType.FIRE\r\n                        ) updateTab[j+1][i] = new FirePaint();\r\n                        if (\r\n                                this.listOfCells[j+1][i-1].getColor() == ColorType.NOTHING ||\r\n                                        this.listOfCells[j+1][i-1].getColor() == ColorType.FIRE\r\n                            ) updateTab[j+1][i-1] = new FirePaint();\r\n                        if (\r\n                                this.listOfCells[j][i-1].getColor() == ColorType.NOTHING ||\r\n                                        this.listOfCells[j][i-1].getColor() == ColorType.FIRE\r\n                        ) updateTab[j][i-1] = new FirePaint();\r\n                    }\r\n                    else if ((i == 0 && j == 43) && this.listOfCells[j][i].getColor() == ColorType.FIRE) {\r\n                        if (\r\n                                this.listOfCells[j-1][i].getColor() == ColorType.NOTHING ||\r\n                                        this.listOfCells[j-1][i].getColor() == ColorType.FIRE\r\n                        ) updateTab[j-1][i] = new FirePaint();\r\n                        if (\r\n                                this.listOfCells[j-1][i+1].getColor() == ColorType.NOTHING ||\r\n                                        this.listOfCells[j-1][i+1].getColor() == ColorType.FIRE\r\n                        ) updateTab[j-1][i+1] = new FirePaint();\r\n                        if (\r\n                                this.listOfCells[j][i+1].getColor() == ColorType.NOTHING ||\r\n                                        this.listOfCells[j][i+1].getColor() == ColorType.FIRE\r\n                        ) updateTab[j][i+1] = new FirePaint();\r\n                    }\r\n                    else if ((i == 32 && j == 43) && this.listOfCells[j][i].getColor() == ColorType.FIRE) {\r\n                        if (\r\n                                this.listOfCells[j-1][i].getColor() == ColorType.NOTHING ||\r\n                                        this.listOfCells[j-1][i].getColor() == ColorType.FIRE\r\n\r\n                        ) updateTab[j-1][i] = new FirePaint();\r\n                        if (\r\n                                this.listOfCells[j-1][i-1].getColor() == ColorType.NOTHING ||\r\n                                        this.listOfCells[j-1][i-1].getColor() == ColorType.FIRE\r\n                        ) updateTab[j-1][i-1] = new FirePaint();\r\n                        if (\r\n                                this.listOfCells[j][i-1].getColor() == ColorType.NOTHING ||\r\n                                        this.listOfCells[j][i-1].getColor() == ColorType.FIRE\r\n                        ) updateTab[j][i-1] = new FirePaint();\r\n                    }\r\n\r\n                    else if (i == 0 && j != 0 && this.listOfCells[j][i].getColor() == ColorType.FIRE) {\r\n                        if (\r\n                                this.listOfCells[j+1][i].getColor() == ColorType.NOTHING\r\n                        )       this.listOfCells[j+1][i] = new FirePaint();\r\n                        if (\r\n                                this.listOfCells[j-1][i].getColor() == ColorType.NOTHING\r\n                        )       this.listOfCells[j-1][i] = new FirePaint();\r\n                    }\r\n                    else if (j == 0 && i != 0 && this.listOfCells[j][i].getColor() == ColorType.FIRE) {\r\n                        if (\r\n                                this.listOfCells[j+1][i].getColor() == ColorType.NOTHING ||\r\n                                        this.listOfCells[j+1][i].getColor() == ColorType.FIRE\r\n                                ) updateTab[j+1][i] = new FirePaint();\r\n                        if (\r\n                                this.listOfCells[j][i+1].getColor() == ColorType.NOTHING ||\r\n                                        this.listOfCells[j][i+1].getColor() == ColorType.FIRE\r\n                        ) updateTab[j][i+1] = new FirePaint();\r\n                    }\r\n                    else if(j == 43 && i != 0 && this.listOfCells[j][i].getColor() == ColorType.FIRE) {\r\n                        if (\r\n                                this.listOfCells[j][i+1].getColor() == ColorType.NOTHING ||\r\n                                        this.listOfCells[j][i+1].getColor() == ColorType.FIRE\r\n                        ) updateTab[j][i+1] = new FirePaint();\r\n                        if (\r\n                                this.listOfCells[j][i-1].getColor() == ColorType.NOTHING ||\r\n                                        this.listOfCells[j][i-1].getColor() == ColorType.FIRE\r\n                        ) updateTab[j][i-1] = new FirePaint();\r\n                    }\r\n\r\n                    else if(j != 0 && i == 32 && this.listOfCells[j][i].getColor() == ColorType.FIRE) {\r\n                        if (\r\n                                this.listOfCells[j+1][i].getColor() == ColorType.NOTHING ||\r\n                                        this.listOfCells[j+1][i].getColor() == ColorType.FIRE\r\n                        ) updateTab[j+1][i] = new FirePaint();\r\n                        if (\r\n                                this.listOfCells[j-1][i].getColor() == ColorType.NOTHING ||\r\n                                        this.listOfCells[j-1][i].getColor() == ColorType.FIRE\r\n                        ) updateTab[j-1][i] = new FirePaint();\r\n                    } else if (this.listOfCells[j+1][i].getColor() == ColorType.NOTHING && j != 0 && i != 0 && j != 43 && i != 32) {\r\n                        updateTab[j+1][i] = new FirePaint();\r\n                        //updateTab[j][i+1] = new FirePaint();\r\n                    }/*else if (this.listOfCells[j][i+1].getColor() == ColorType.NOTHING && j != 0 && i != 0 && j != 43 && i != 32) {\r\n                        updateTab[j][i+1] = new FirePaint();\r\n                    }*/\r\n\r\n\r\n                }\r\n            }\r\n        } catch (Exception e) {\r\n\r\n        }\r\n\r\n    }\r\n\r\n    public void restartGrid() {\r\n        initGrid();\r\n    }\r\n\r\n    public Cell[][] getListOfCells() {\r\n        return listOfCells;\r\n    }\r\n\r\n    public void setListOfCells(Cell[][] listOfCells) {\r\n        this.listOfCells = listOfCells;\r\n    }\r\n\r\n    public void displayTab() {\r\n        for(int j = 0; j < this.fireFighters.size(); j++) {\r\n            System.out.println(this.fireFighters.get(j).toString());\r\n        }\r\n        System.out.println();\r\n    }\r\n\r\n    public void setFireFighters(List<FireFighter> fireFighters) {\r\n        this.fireFighters = fireFighters;\r\n    }\r\n}\r\n\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/firefighterstarter/modele/cell/CellMouvementManager.java b/src/main/java/com/firefighterstarter/modele/cell/CellMouvementManager.java
--- a/src/main/java/com/firefighterstarter/modele/cell/CellMouvementManager.java	(revision 08f2502250e276afc659895cb65f2c80626140bb)
+++ b/src/main/java/com/firefighterstarter/modele/cell/CellMouvementManager.java	(date 1669724685781)
@@ -50,8 +50,9 @@
        // mouveCloud(updateTab);
 
        // mouveFire(updateTab);
+        mouveFF(updateTab);
 
-        return mouveFF(updateTab);
+        return updateTab;
     }
 
     public void initMountain() {
@@ -181,16 +182,7 @@
 
     }
 
-    public Cell[][] mouveFF(Cell[][] updateTab) {
-        Cell[][] updateTabAfterFF = new Cell[columnNumber][rowsNumber];
-        for(int i = 0 ; i < columnNumber; i++) {
-            for(int j = 0; j < rowsNumber; j++) {
-                //System.out.println(updateTab[j][i].getColor());
-                if(updateTab[j][i].getColor() != ColorType.FIREFIGHTER)
-                    System.out.println("cc");
-                    //updateTabAfterFF[i][j] = updateTab[i][j];
-            }
-        }
+    public void mouveFF(Cell[][] updateTab) {
 
         for(FireFighter fireFighter : this.fireFighters) {
             if(fireFighter.goalIsNull()) {
@@ -200,8 +192,8 @@
                     for(int i = 0; i < this.rowsNumber; i++) {
                         for (int j = 0; j < this.columnNumber; j++) {
                             if(fire == updateTab[j][i]) {
-                                updateTabAfterFF[j][i] = new FireFighterPaint();
-                                updateTabAfterFF[fireFighter.getColumn()][fireFighter.getRow()] = new WhitePaint();
+                                updateTab[j][i] = new FireFighterPaint();
+                                updateTab[fireFighter.getColumn()][fireFighter.getRow()] = new WhitePaint();
                                 fireFighter.setColumn(i);
                                 fireFighter.setRow(j);
                             }
@@ -212,8 +204,6 @@
             }
             fireFighter.resetGoal();
         }
-
-        return updateTabAfterFF;
     }
 
     public void mouveFire(Cell[][] updateTab) {
@@ -353,10 +343,6 @@
         }
         System.out.println();
     }
-
-    public void setFireFighters(List<FireFighter> fireFighters) {
-        this.fireFighters = fireFighters;
-    }
 }
 
 
